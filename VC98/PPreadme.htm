<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 Final//EN">
<HTML>
<!--VSSP3Release-->
<HEAD>
<META HTTP-EQUIV="Content-Type" Content="text/html; charset=Windows-1252">
<style>Microsoft Visual C++ Processor Pack Beta Release Readme</style><style>
<!--

body
	{
	padding: 0px 0px 0px 13px;
	background: #ffffff; 
	color: #000000;
	font-family: Verdana, Arial, Helvetica, sans-serif;
	font-size: 80%;
	}

h1, h2, h3, h4
	{
	font-family: Verdana, Arial, Helvetica, sans-serif;
	margin-left: -13px;
	}
	
h1
	{
	font-size: 180%;
	margin-top: 0em;
	margin-bottom: .5em; 
	}
	
.lev1
	{
	font-size: 200%;
	font-weight: bolder;
	color: #000000;
	}

.lev2
	{
	font-size: 180%;
	font-weight: bold;
	}

.lev3
	{
	font-size: 160%;
	font-weight: bold;
	}

.lev4
	{
	font-size: 140%;
	font-weight: bold;
	}

.lev5
	{
	font-size: 140%;
	font-weight: lighter;
	}

.lev6
	{
	font-size: 140%;
	font-weight: lighter;
	}

h2
	{
	font-size: 130%;
	margin-top: 1em;
	margin-bottom: .6em; 
	}
	
h3
	{
	font-size: 115%;
	margin-top: 1em;
	margin-bottom: .6em;
	}
	
h4
	{
	font-size: 100%;
	margin-top: 1em;
	margin-bottom: .6em; 
	}

ul p, ol p, dl p
	{
	margin-left: 0em;
	}

p
	{
	margin-top: .6em;
	margin-bottom: .6em;
	}

dl
	{
	margin-top: 0em; 
	}

dd
	{
	margin-bottom: 0em;  
	margin-left: 1.9em; 
	}

dt
	{
	margin-top: .6em; 
	}

ul, ol
	{
	margin-top: .6em; 	
	margin-bottom: 0em;
	margin-left: 1.9em; 
	}

li
	{
	margin-bottom: .6em;
	}

pre
	{
	margin-top: .6em;
	margin-bottom: .6em; 
	}

pre,code
	{
	font: 100% Courier New, Courier, mono; 
	color: #000066;
	}

table
	{
	width: 95%;
	border-collapse: collapse;
	margin-top: .6em;
	margin-bottom: .3em;
	}
		
th
	{ 
	background: #cccccc;
	border-style: solid;
	border-width: 2px;
	border-color: #999999;
	padding: 4px 6px;
	text-align: left;
	font-size: 80%;
	vertical-align: bottom;
	}
		
td
	{ 
	background: #ffffff;
	border-style: solid;
	border-width: 2px;
	border-color: #999999;
	padding: 4px 6px;
	vertical-align: top;
	font-size: 80%;
	}

blockquote
	{
	margin-left: 3.8em;
	margin-right: 3.8em;
	margin-top: .6em;
	margin-bottom: .6em;
	}

img
	{
	border: none; 
	}

a:link
	{
	color: #0000ff;
	}
	
a:visited
	{
	color: #000066; 
	}
	
a:hover
	{
	color: #3366ff;
	}
	
p.label
	{
	margin-top: 1em;
	}
	
p.labelforproc
	{
	margin-top: 1em;
	color: #000066;
	}
	
.fineprint
	{
	font-size: 80%;
	}
	
.indent
	{
	margin-left: 1.9em; 
	margin-right: 1.9em;
	}

/* Additions to support reftips */

div.reftip
	{
	position: absolute;
	z-index: 1;
	padding: 2px 10px;
	visibility: hidden;
	border: 1px solid #999999;
	background: #ffffcc;
	}

pre.syntax
	{
	background: #cccccc;
	padding: 4px 8px;
	cursor: text;
	margin-top: 1em;
	margin-bottom: 1em; 
	color: #000000;
	}

a.synParam
	{
	color: #0000ff;
	text-decoration: none;
	}

a.synParam:hover
	{
	color: #3366ff;
	text-decoration: underline;
	}

-->
</style>

<title>Microsoft Visual C++ Processor Pack Beta Release Readme</title>

</HEAD>
<BODY>

<h1>Microsoft Visual C++ Processor Pack Release Readme</h1>
<p><font face="Verdana">© 2000 Microsoft Corporation. All rights reserved.</font></p>
<p><font face="Verdana">Welcome to the Microsoft Visual C++ Processor Pack
Release with Service Pack 5 for Visual C++ 6.0. The Microsoft Visual C++ Processor Pack Release
Readme contains the following sections:</font></p>
<ul>
  <li><font face="Verdana"><a href="#setupinstructions">Setup Instructions</font></a></li>
  <li><font face="Verdana"><a href="#compilerspecificnotes">Compiler-Specific
    Notes</a></font></li>
  <li><font face="Verdana"><a href="#debuggerspecificnotes">Debugger-Specific
    Notes</a></font></li>
  <li><font face="Verdana"><a href="#documentationnotes">Documentation Notes</a></font></li>
  <li><font face="Verdana"><a href="#fixedissues">Fixed Issues in this Service
    Pack</a></font></li>
  <li><font face="Verdana"><a href="#intelperformancelibraries">Intel Performance
    Libraries and Sample Files</a></font></li>
  <li><font face="Verdana"><a href="#amdsamplefiles">AMD Sample Files</a></font></li>
  <li><font face="Verdana"><a href="#masm">Using MASM to Assemble .asm Files</a></font></li>
</ul>
<h2><font face="Verdana"><a name="setupinstructions"></a>Setup Instructions</font></h2>
<p><font face="Verdana"> The Processor Pack requires
that you have already
  installed Microsoft Visual C++ version 6.0 with Service Pack 5 or greater. To install Service Pack
5,
go to the Product Updates page at <a href="http://msdn.microsoft.com/vstudio/sp/vs6sp4/dnldoverview.asp">http://msdn.microsoft.com/vstudio/downloads/updates.asp</a>
 and download the appropriate version.</font></p>
<p><font face="Verdana">The Processor Pack also requires Microsoft Visual C++
version 6.0 Professional or Enterprise Editions. The Processor Pack will not
install on the Standard Edition.</font></p>
  <p><font face="Verdana">To install the Processor Pack, run Vcpp.exe. The
  Setup program overwrites your compiler files, and the Processor Pack documentation
  (<a href="procpack.chm">procpack.chm</a>) is installed in the Vc98 folder. MASM version 6.15 is installed in
  the bin folder, located in the Vc98 folder.</font></p>
<p><font face="Verdana"> There is no uninstall; you must
  uninstall Microsoft Visual C++ 6.0 and manually remove the Processor Pack files.</font></p>
<h2><font face="Verdana"><a name="compilerspecificnotes"></a>Compiler-Specific Notes</font></h2>
<ul>
  <li><font face="Verdana"><b>No EMMS Instruction Warning</b><br>
    You may get the message
      &quot;Warning C4799: Function <i>x</i> has no EMMS instruction&quot; from
      the compiler in locations that no EMMS instruction is needed. To disable this warning, use </font><font face="Courier" size="2">#pragma
      warning</font><font face="Verdana" size="2">.</font></li>
  <li><font face="Verdana"><b>Rebuilding MFC with Processor Pack Compiler</b><br>
    You cannot rebuild MFC
      with the Processor Pack compiler. Because of changes related to inlining,
      rebuilding MFC with the Processor Pack compiler results in link errors.
      The link errors are unresolved externals for <b>CTime::operator</b>
      members. If you need to rebuild MFC, you must uninstall Visual C++ 6.0,
      manually remove the files installed by Visual C++ Processor Pack and then
      reinstall Visual C++ 6.0 and any necessary service packs.</font></li>
  <li><font face="Verdana"><b>Calling a Virtual Member Function in Constructor
    Invocation</b><br>
    If you call a virtual member function in a
    constructor invocation, the compiler may generate an Internal Compiler Error
    message. To work around this, call the virtual member function and assign
    its return value to a temporary. Then pass this temporary in the
    construction invocation.</font></li>
  <li><b>Passing __m64 and __m128 Argument Types<br>
    </b>Passing multibyte argument types by value may result in a run time
    performance penalty. For <b>__m64</b> and <b>__m128</b> types, this is of
    particular concern because of the additional requirement of memory
    alignment. While this compiler imposes no restrictions on passing <b>__m64</b>
    and <b>__m128</b> types, <font COLOR="#000000">a future release of the
    compiler </font><font FACE="Arial" SIZE="2" COLOR="#000000">will</font><font COLOR="#000000">
    </font>prohibit the passing of more than three <b>__m64</b> or three <b>__m128</b>
    types by value. The first 3 parameters are passed in registers, thus
    avoiding alignment and performance issues; <font COLOR="#000000">it is
    recommended that the fourth <b>__m64</b> or <b>__m128</b> parameters and
    beyond be passed by reference</font>. To avoid compatibility problems with
    future compilers and to enhance performance, do not pass more then three <b>__m64</b>
    or<b> __m128</b> types by value. There are no restrictions to passing these
    argument types by reference (pointers).
    <p><font COLOR="#000000">An additional construct to avoid is passing a
    structure by value, particularly a structure that contains a <b>__m64</b> or
    <b>__m128</b> data type. In many case, accessing a <b>__m64</b> or <b>__m128</b>
    value in a structure passed by value results in an alignment exception being
    thrown.</font><b></li>
    <li>Variable Argument List and Passing __m64 and __m128 Argument Types<br>
    </b>Because of alignment issues, passing these argument types in a variable
    argument list<font COLOR="#000000"> </font><font FACE="Arial" SIZE="2" COLOR="#000000">by
    value</font><font COLOR="#000000"> </font>is not supported. Future compilers
    may support this feature.<b></li>
    <li>Compatibility with Intel Compiler<br>
    </b>Some compatibility issues have been identified with mixing source and
    object files between the Microsoft Visual C++ Processor Pack compiler and
    the Intel C/C++ compiler. These issues arise when using <b>__m64</b> and <b>__m128
    </b>types. These problems are exposed when sharing these data types across
    compilers either as global variables or as formal parameters. To minimize
    any problems, it is recommended that uses of <b>__m64</b> and<b> __m128</b>
    types remain within the scope of a single compiler. Both compilers are in
    the process of eliminating these inconsistencies in future releases.</li>
</ul>
<h2><font face="Verdana"><a name="debuggerspecificnotes"></a>Debugger-Specific
Notes</font></h2>
<p><font face="Verdana">The debugger requires that if you are running Windows
NT version 4.0, you must have Service Pack 5 or greater installed.&nbsp;For
remote debugging, you must have Visual C++ with Service Pack 5 installed on both
machines.</font></p>
<p>If you edit the value of a register from the Registers window or an EE <b>
</b>window (such as QuickWatch or Watch), it may revert to the
previous value once you step in the debugger. This affects STO-ST7, FPU status,
MM0-MM7, XMM0-XMM7, XMM00-XMM73, and MM00-MM71 registers on Windows 95 and Windows 98.</p>
<h2><font face="Verdana"><a name="documentationnotes"></a>Documentation Notes</font></h2>
<font face="Verdana">Under the AMD 3DNow! Technology Overview and
    Intrinsics node, the Data Types topic lists the second integer data type
    graphic as (64 bits x 1) Quad word. It should read (16 bits x 4) Quad word.
    Also, the bit pattern in the last block on this graphic reads 43 to 63. It
    should read 48 to 63.</font>
<h2><font face="Verdana"><a name="fixedissues"></a>Fixed Issues in this Service
Pack</font></h2>
<p><font COLOR="#000000">The problems with <b>QIfist</b> have been addressed in
this service pack. If you encounter any problems using <b>QIfist</b></font>,<font COLOR="#000000">
report them to Microsoft Product Support Services at <a href="http://support.microsoft.com/directory">http://support.microsoft.com/directory</a>.</font></p>
<h2><a name="intelperformancelibraries"></a>Intel Performance Libraries and
Sample Files</h2>
<p>Intel performance libraries are available at <u><font COLOR="#0000ff"><a href="http://developer.intel.com/vtune/perflibst/">http://developer.intel.com/vtune/perflibst/</a></font></u>.</p>
<p>Intel SSE samples are available at <u><font COLOR="#0000ff"><a href="http://developer.intel.com/vtune/cbts/strmsimd/appnotes.htm">http://developer.intel.com/vtune/cbts/strmsimd/appnotes.htm</a></font></u>.</p>
<p>Intel SSE2 samples are available at <u><font COLOR="#0000ff"><a href="http://developer.intel.com/vtune/cbts/strmsimd/sse2_appnotes.htm">http://developer.intel.com/vtune/cbts/strmsimd/sse2_appnotes.htm</a></font></u>.</p>
<h2><a name="amdsamplefiles"></a>AMD Sample Files</h2>
<p>AMD sample files are available in your installation folder. You can find them
by going to the Samples folder in the Vc98 <b> </b>folder.
Click the AMD folder, and there are two sample folders, Isdk and Asdk, which
contain the sample files. You
do not need a project; compile each sample with <font face="Courier">cl&nbsp;/Ox&nbsp;/DWIN32
/Fesample.exe *.cpp</font>.</p>
<h2><a name="masm"></a>Using MASM to Assemble .asm Files</h2>
<p>Microsoft Visual C++ does not support
assembler source files by default, that is, the Developer Studio does not
associate any special significance&nbsp; to .asm files. However, there are two viable
options. You can use the following two methods to add .asm files to a Visual C++
project. The methods are:</p>
<ul>
  <li>Using custom build rules.</li>
  <li>Using an assembler to build the .obj file from the .asm file from the
    command line and add the .obj file to the project or add to the linker input
    files.</li>
</ul>
<p>The use of custom build is described below. By using a custom build rule, a
project can invoke MASM on a per-file basis to assemble .asm files. The
resulting object modules are then automatically linked into the desired target.</p>
<p>For more information about MASM, see <a href="MasmRef.doc">MASM Reference
Documentation</a>.</p>
<p>Using Visual C++ Developer Studio, the following provides sample code and a
step-by-step example of how to create a simple console application, CAPP, that
requires MASM (ML.exe) to assemble one of its source files.</p>
<h3>Sample Code - C Module</h3>
<pre style="margin-top:12.0pt;margin-right:0pt;
margin-bottom:12.0pt;margin-left:0pt;background:#EEEEEE" class="syntax"><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;color:black">/* Filename: CMAIN.C */ </span><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;
color:black">

#include &lt;stdio.h&gt;
&nbsp;
#ifdef __cplusplus</span><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;color:black">
extern &quot;C&quot; {
</span><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;
color:black">#endif</span><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;color:black">
&nbsp;</span><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;
color:black">
void MasmSub (char *, short *, long *);
&nbsp;
#ifdef __cplusplus</span><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;color:black">
}</span><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;
color:black">
#endif</span><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;color:black">

</span><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;
color:black">char chararray[4] = &quot;abc&quot;;
short shortarray[3]<span style="mso-spacerun: yes">&nbsp; </span>= {1, 2, 3};
long longarray[3] = {32768, 32769, 32770};

void main( void )
</span><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;color:black">{
</span><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;
color:black"><span style="mso-spacerun: yes">&nbsp;&nbsp; </span>printf (&quot;%s\n&quot;, chararray);
<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>printf (&quot;%d %d %d\n&quot;, shortarray[0], shortarray[1], shortarray[2]);
<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>printf (&quot;%ld %ld %ld\n&quot;, longarray[0], longarray[1], longarray[2]);
<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>MasmSub (chararray, shortarray, longarray);
<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>printf (&quot;%s\n&quot;, chararray);
<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>printf (&quot;%d %d %d\n&quot;, shortarray[0], shortarray[1], shortarray[2]);
<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>printf (&quot;%ld %ld %ld\n&quot;, longarray[0], longarray[1], longarray[2]);
} </span></pre>
<h3>Sample Code - ASM Module</h3>
<pre style="margin-top:12.0pt;margin-right:0pt;
margin-bottom:12.0pt;margin-left:0pt;background:#EEEEEE" class="syntax"><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;color:black">; Filename: MASMSUB.ASM</span><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;
color:black">
; Assemble options needed for ML: /c /Cx /coff</span><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;
color:black">

.386</span><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;color:black">
.MODEL flat, C
</span><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;
color:black">.CODE

</span><span style="font-size:8.0pt;font-family:&quot;Courier New&quot;;
color:black">MasmSub PROC uses esi, \ <span style="mso-spacerun: yes">
&nbsp;&nbsp;&nbsp;</span>arraychar:PTR, \ <span style="mso-spacerun: yes">
&nbsp;&nbsp;&nbsp;</span>arrayshort:PTR, \ <span style="mso-spacerun: yes">
&nbsp;&nbsp;&nbsp;</span>arraylong:PTR
<span style="mso-spacerun: yes">&nbsp;&nbsp; </span>mov esi, arraychar ; Load ESI with the address of the char array.<span style="mso-spacerun: yes">
&nbsp;&nbsp; </span>mov BYTE PTR [esi], &quot;x&quot;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Since a char is 1 byte long, each<span style="mso-spacerun: yes">
&nbsp;&nbsp; </span>mov BYTE PTR [esi+1], &quot;y&quot;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; successive element can be accessed<span style="mso-spacerun: yes">
&nbsp;&nbsp; </span>mov BYTE PTR [esi+2], &quot;z&quot;<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </span>; by adding 1 more to esi.<span style="mso-spacerun: yes">
&nbsp;&nbsp; </span>mov esi, arrayshort; Load ESI with the address of the short array.<span style="mso-spacerun: yes">
&nbsp;&nbsp; </span>add WORD PTR [esi], 7<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; Since a short is 2 bytes long, each<span style="mso-spacerun: yes">
&nbsp;&nbsp; </span>add WORD PTR [esi+2], 7<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; successive element can be accessed<span style="mso-spacerun: yes">
&nbsp;&nbsp; </span>add WORD PTR [esi+4], 7<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; by adding 2 more to esi.<span style="mso-spacerun: yes">
&nbsp;&nbsp; </span>mov esi, arraylong ; Load ESI with the address of the long array.<span style="mso-spacerun: yes">
&nbsp;&nbsp; </span>inc DWORD PTR [esi]<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;</span>; Since a long is 4 bytes long, each<span style="mso-spacerun: yes">
&nbsp;&nbsp; </span>inc DWORD PTR [esi+4]<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; successive element can be accessed<span style="mso-spacerun: yes">
&nbsp;&nbsp; </span>inc DWORD PTR [esi+8]<span style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>; by adding 4 more to esi.<span style="mso-spacerun: yes">
&nbsp;&nbsp; </span>ret
MasmSub ENDP</span><span style="font-size:8.0pt;
font-family:&quot;Courier New&quot;;mso-fareast-font-family:&quot;Times New Roman&quot;;mso-bidi-font-family:
&quot;Times New Roman&quot;;color:black;mso-ansi-language:EN-US;mso-fareast-language:
EN-US;mso-bidi-language:AR-SA">
END</span></pre>
<h3>Sample Code - Step-by-Step Instructions for Building CAPP</h3>
<p class="MsoNormal" style="margin-bottom:12.0pt"><span style="font-family:Verdana;
color:black">Use the following steps to create the project:
<ol>
  <li>Start the Visual C++ Developer Studio program
    (Msdev.exe).</li>
  <li>Create and save Cmain.c and
    MasmSub.asm.</li>
  <li>On the <b>File</b> menu, click <b>New</b>. Create a new console
    application named CAPP.</li>
</ol>
<p class="MsoNormal" style="margin-top:12.0pt;margin-bottom:12.0pt"><span style="font-family:Verdana;
color:black">Use the following steps to build the project: </span></p>
<ol>
  <li><span style="font-family:Verdana">On
    the <b> Project</b> menu, click <b>Add To Project</b>, and then click <b>Files</b>. </span></li>
  <li><span style="font-family:Verdana">Find
    and select both Cmain.c and MasmSub.asm. </span></li>
  <li>In <span style="font-family:Verdana">the <b> Project Workspace</b> window,
    right-click the file MasmSub.asm and click <b>Settings</b> on the shortcu
    menu. </span></li>
  <li><span style="font-family:Verdana">On
    the <b> Project Settings</b> dialog box, select <b> All Configurations</b> in the
    <b> Settings
    For</b> list. </span></li>
  <li><span style="font-family:Verdana">Click
    the <b> Custom Build</b> tab. </span></li>
  <li>In the first line of the <b>Build command(s)</b> dialog box, enter ml.exe.
    Then enter the desired MASM command-line options, <b>-Fo</b> immediately
    followed by the macros for the Intermediate directory and file Input Name
    followed by .obj with the macros separated by a backslash (\), and the macro
    for the file Input Name followed by .asm. Obtain the macros by selecting the
    <b>Directories</b> button and choosing <b>Intermediate</b>; then select the <b>Files</b>
    button and choose <b>Input Name</b> from the resulting menu. For example,
    the entry would appear as follows:
</span> 
    <p class="MsoNormal" style="margin-right:36.0pt;mso-margin-top-alt:auto;
mso-margin-bottom-alt:auto;margin-left:72.0pt">ml.exe -c -coff -Cx -Fo$(IntDir)\$(InputName).obj
    $(InputName).asm<p class="MsoNormal" style="margin-top:12.0pt;margin-bottom:12.0pt">Note
  that you must always add <b>-c</b> and <b>-coff</b> when using MASM. For the
  debug build, select the Win32 Debug configuration and add the <b>-Zi</b>
  switch.</p>
<span style="font-family:Verdana;
color:black">
  <li><span style="font-family:Verdana">In
    the first line of the <b> Output file(s)</b> </span>
</span>  dialog<span style="font-family:Verdana;
color:black"><span style="font-family:Verdana"> box, enter </span>
</span> $(IntDir)\$(InputName).obj<span style="font-family:Verdana;
color:black"><span style="font-family:Verdana">. You can obtain the macros with
  the same procedure used in step 6.</span></li>
  <li><span style="font-family:Verdana">Select the desired build configuration.
    On the <b>Build</b> menu, click <b>Rebuild All</b>. </span></li>
</ol>
<p class="MsoNormal"><span style="font-family:Verdana;color:black">For more
information on custom build rules, see the Visual C++ online Help for the <b> Custom
Build </b>tab (press the Help button in the<b> Project Settings</b> dialog box when the
<b>
Custom Build</b> tab is selected).</span></p>
</span> 